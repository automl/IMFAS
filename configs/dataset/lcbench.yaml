name: LCBench

path:
  algo_meta: ${dir_data_raw}/${dataset.name}/config_subset.csv
  data_meta: ${dir_data_raw}/${dataset.name}/meta_features.csv
  lc_meta: ${dir_data_raw}/${dataset.name}/logs_subset.h5

  # fixme: move to dataset_raw?
lc_metric: Train/val_accuracy # to be extracted & used (see dataset_raw/lcbench for options)
slices: [ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 51 ] #  FIXME: ${range:1,51,1} does not work


dataset_raw:
  _target_: imfas.data.lcbench.raw_pipe.raw_pipe
  dataset_name: LCBench

  #TODO Change to relative
  dir_data: data
  extract: data_2k_lw  # json file
  enable: False # whether to override the preprocessing
  re_download: False
  reload_from_downloads: False # will override the '*subset' files


  selection:
    metric: final_test_cross_entropy
    # options :
    #       'model_parameters', 'final_train_cross_entropy', 'final_train_accuracy',
    #       'final_train_balanced_accuracy', 'final_val_cross_entropy',
    #       'final_val_accuracy', 'final_val_balanced_accuracy',
    #       'final_test_cross_entropy', 'final_test_accuracy',
    #       'final_test_balanced_accuracy', 'OpenML_task_id', 'test_split',
    #       'budget', 'seed', 'instances', 'classes', 'features'

    algo: # fixme: move this to separate yaml
      _target_: imfas.data.ensemble.topk.ensemble
      k: 3

    bench: lcbench

  learning_curves:
    metrics:
      - Train/loss
      - Train/lr
      - Train/test_balanced_accuracy
      - Train/test_cross_entropy
      - Train/test_result
      - Train/train_accuracy
      - Train/train_balanced_accuracy
      - Train/train_cross_entropy
      - Train/val_accuracy
      - Train/val_balanced_accuracy
      - Train/val_cross_entropy
      - epoch
      - time

      # options:
      #       'Train/loss', 'Train/lr',
      #       'Train/test_balanced_accuracy', 'Train/test_cross_entropy',
      #       'Train/test_result', 'Train/train_accuracy',
      #       'Train/train_balanced_accuracy', 'Train/train_cross_entropy',
      #       'Train/val_accuracy', 'Train/val_balanced_accuracy',
      #       'Train/val_cross_entropy', 'epoch', 'time'
      #       'Train/gradient_max', 'Train/gradient_mean', 'Train/gradient_median',
      #       'Train/gradient_norm', 'Train/gradient_q10', 'Train/gradient_q25',
      #       'Train/gradient_q75', 'Train/gradient_q90', 'Train/gradient_std',
      #       'Train/layer_wise_gradient_max_layer_0',
      #       'Train/layer_wise_gradient_max_layer_1',
      #       'Train/layer_wise_gradient_max_layer_2',
      #       'Train/layer_wise_gradient_max_layer_3',
      #       'Train/layer_wise_gradient_mean_layer_0',
      #       'Train/layer_wise_gradient_mean_layer_1',
      #       'Train/layer_wise_gradient_mean_layer_2',
      #       'Train/layer_wise_gradient_mean_layer_3',
      #       'Train/layer_wise_gradient_median_layer_0',
      #       'Train/layer_wise_gradient_median_layer_1',
      #       'Train/layer_wise_gradient_median_layer_2',
      #       'Train/layer_wise_gradient_median_layer_3',
      #       'Train/layer_wise_gradient_q10_layer_0',
      #       'Train/layer_wise_gradient_q10_layer_1',
      #       'Train/layer_wise_gradient_q10_layer_2',
      #       'Train/layer_wise_gradient_q10_layer_3',
      #       'Train/layer_wise_gradient_q25_layer_0',
      #       'Train/layer_wise_gradient_q25_layer_1',
      #       'Train/layer_wise_gradient_q25_layer_2',
      #       'Train/layer_wise_gradient_q25_layer_3',
      #       'Train/layer_wise_gradient_q75_layer_0',
      #       'Train/layer_wise_gradient_q75_layer_1',
      #       'Train/layer_wise_gradient_q75_layer_2',
      #       'Train/layer_wise_gradient_q75_layer_3',
      #       'Train/layer_wise_gradient_q90_layer_0',
      #       'Train/layer_wise_gradient_q90_layer_1',
      #       'Train/layer_wise_gradient_q90_layer_2',
      #       'Train/layer_wise_gradient_q90_layer_3',
      #       'Train/layer_wise_gradient_std_layer_0',
      #       'Train/layer_wise_gradient_std_layer_1',
      #       'Train/layer_wise_gradient_std_layer_2',
      #       'Train/layer_wise_gradient_std_layer_3'

train_dataset_class:
  _target_: imfas.data.Dataset_Join_Dmajor
  meta_dataset: ${dataset.dataset_meta}
  lc: ${dataset.lc_meta}
  meta_algo: ${dataset.algo_meta}


test_dataset_class:
  _target_: imfas.data.Dataset_Join_Dmajor
  meta_dataset: ${dataset.dataset_meta}
  lc: ${dataset.lc_meta}
  meta_algo: ${dataset.algo_meta}

train_dataloader_class:
  _target_: torch.utils.data.DataLoader
  batch_size: 1
  shuffle: True
  num_workers: ${num_workers}

test_dataloader_class:
  _target_: torch.utils.data.DataLoader
  batch_size: 1
  shuffle: False
  num_workers: ${num_workers}
