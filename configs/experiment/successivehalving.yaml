# @package _global_

# The general idea here is, that SuccessiveHalving is a non-parametric, myopic, but
# learning curve aware algorithm.
# Since we only ever care for its baseline (test) performance, this pipe is a bit hacky.

defaults:
  - /model: successive_halving

wandb:
  group: 'Baseline: SH'
  job_type: 'sh_eta2'
  notes: 'Successive Halving'

device: 'cpu'

model:
  eta: 2

dataset:
  test_dataloader_class:
    batch_size: 1 # has to be one for successive halving. aggregate over test set in trainer.evaluate
    shuffle: False # to know on which dataset in test we perform badly

trainer:
  run_call:
    epochs: 0 # since we only need a single test execution anyways (HACK)

    test_loss_fns:
      spearman:
        #        _target_: imfas.losses.plackett_luce.PlackettLuceLoss
        _target_: imfas.losses.spearman.SpearmanLoss


