# @package _global_

# The general idea here is, that SuccessiveHalving is a non-parametric, myopic, but
# learning curve aware algorithm.
# Since we only ever care for its baseline (test) performance, this pipe is a bit hacky.

#defaults:
  #- override /train_test_split: trainvalidtest

wandb:
  group: 'RandomBaseline'
  job_type: 'random'
  notes: 'Random Baseline'
  tags:
    - 'Random'

device: 'cpu'

model:
  _target_: imfas.models.baselines.randombaseline.RandomBaseline


dataset:
  test_dataloader_class:
    batch_size: 1 # has to be one for successive halving. aggregate over test set in trainer.evaluate
    shuffle: False # to know on which dataset in test we perform badly

trainer:
  run_call:
    epochs: 0 # since we only need a single test execution anyways (HACK)

#    test_loss_fns:
#      spearman:
#        #        _target_: imfas.losses.plackett_luce.PlackettLuceLoss
#        _target_: imfas.losses.spearman.SpearmanLoss
    test_loss_fns:

      top1_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 1

      top3_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 3

      top5_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 5