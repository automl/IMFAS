# @package _global_

# Transformer model.
# d = MLP_d(D), t = TransformerEncoder(lcs_DA), output = MLP(concat(d,t))

defaults:
  - /model: imfas_h_transformer


wandb:
  group: 'imfas_H_transformer_Reduce_G_PE'
  job_type: 'train'
  notes: 'imfas H transformer reduced layer global positional encoding'
  tags:
    - 'IMFAS H Transformer Reduce G PE'


dataset:
  train_dataset_class:
    _target_: imfas.data.Dataset_Join_Dmajor
    # enable masking
    masking_fn:
      _partial_: True
      _target_: imfas.utils.masking.mask_lcs_randomly


#   train_dataloader_class:
#     batch_size: 10

#   valid_dataloader_class:
#     batch_size: 100

#   test_dataloader_class:
#     batch_size: 100

model:
  encoder:
    hidden_dims:
      - ${ dynamically_computed.n_data_meta_features }
      - 300
      - 200

  n_algos: ${dynamically_computed.n_algos}
  n_layers: 2
  n_fidelities: ${dynamically_computed.len_lc}
  has_reduce_layer: True
  pe_on_global_level: True

  decoder:
    _target_: imfas.utils.mlp.MLP

    #  [ ${ add: ${ model.encoder.hidden_dims[ 0 ] }, ${ transformer_dims[ 0 ] } }, 200, 100 ] # fixme: change index
    activation: 'relu'

    hidden_dims:
      # - ${add:dynamically_computed.n_algos,dynamically_computed.n_algos}
      - 264               # FIXME: dynamically compute based on the
      # concat dim before the tensor comes to the decoder
      - ${dynamically_computed.n_algos}


trainer:
  run_call:
    epochs: 150
    log_freq: 5         # wandb mistakes single value additions as media files, so log_freq helps mitigate that
    train_loss_fn:
      _target_: imfas.losses.spearman.SpearmanLoss

    test_loss_fns:

      top1_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 1

      top3_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 3

      top5_regret:
        _target_: imfas.evaluation.topkregret.TopkRegret
        k: 5
